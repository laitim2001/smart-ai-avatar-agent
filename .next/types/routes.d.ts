// This file is generated automatically by Next.js
// Do not edit this file manually

type AppRoutes = "/" | "/[locale]" | "/[locale]/conversations" | "/[locale]/dashboard" | "/[locale]/forgot-password" | "/[locale]/login" | "/[locale]/prompts" | "/[locale]/register" | "/[locale]/reset-password" | "/[locale]/settings" | "/[locale]/settings/activity" | "/[locale]/settings/avatar" | "/[locale]/settings/preferences" | "/[locale]/settings/security" | "/[locale]/verify-email"
type AppRouteHandlerRoutes = "/api/auth/[...nextauth]" | "/api/auth/forgot-password" | "/api/auth/login" | "/api/auth/register" | "/api/auth/reset-password" | "/api/auth/verify-email" | "/api/avatars" | "/api/avatars/[id]/favorite" | "/api/avatars/recommended" | "/api/chat" | "/api/conversations" | "/api/conversations/[id]" | "/api/conversations/[id]/messages" | "/api/health" | "/api/prompts" | "/api/prompts/[id]" | "/api/stt" | "/api/tts" | "/api/user/activity" | "/api/user/favorites" | "/api/user/me" | "/api/user/password" | "/api/user/preferences" | "/api/user/profile" | "/api/user/settings"
type PageRoutes = never
type LayoutRoutes = "/" | "/[locale]" | "/[locale]/settings"
type RedirectRoutes = never
type RewriteRoutes = never
type Routes = AppRoutes | PageRoutes | LayoutRoutes | RedirectRoutes | RewriteRoutes | AppRouteHandlerRoutes


interface ParamMap {
  "/": {}
  "/[locale]": { "locale": string; }
  "/[locale]/conversations": { "locale": string; }
  "/[locale]/dashboard": { "locale": string; }
  "/[locale]/forgot-password": { "locale": string; }
  "/[locale]/login": { "locale": string; }
  "/[locale]/prompts": { "locale": string; }
  "/[locale]/register": { "locale": string; }
  "/[locale]/reset-password": { "locale": string; }
  "/[locale]/settings": { "locale": string; }
  "/[locale]/settings/activity": { "locale": string; }
  "/[locale]/settings/avatar": { "locale": string; }
  "/[locale]/settings/preferences": { "locale": string; }
  "/[locale]/settings/security": { "locale": string; }
  "/[locale]/verify-email": { "locale": string; }
  "/api/auth/[...nextauth]": { "nextauth": string[]; }
  "/api/auth/forgot-password": {}
  "/api/auth/login": {}
  "/api/auth/register": {}
  "/api/auth/reset-password": {}
  "/api/auth/verify-email": {}
  "/api/avatars": {}
  "/api/avatars/[id]/favorite": { "id": string; }
  "/api/avatars/recommended": {}
  "/api/chat": {}
  "/api/conversations": {}
  "/api/conversations/[id]": { "id": string; }
  "/api/conversations/[id]/messages": { "id": string; }
  "/api/health": {}
  "/api/prompts": {}
  "/api/prompts/[id]": { "id": string; }
  "/api/stt": {}
  "/api/tts": {}
  "/api/user/activity": {}
  "/api/user/favorites": {}
  "/api/user/me": {}
  "/api/user/password": {}
  "/api/user/preferences": {}
  "/api/user/profile": {}
  "/api/user/settings": {}
}


export type ParamsOf<Route extends Routes> = ParamMap[Route]

interface LayoutSlotMap {
  "/": never
  "/[locale]": never
  "/[locale]/settings": never
}


export type { AppRoutes, PageRoutes, LayoutRoutes, RedirectRoutes, RewriteRoutes, ParamMap, AppRouteHandlerRoutes }

declare global {
  /**
   * Props for Next.js App Router page components
   * @example
   * ```tsx
   * export default function Page(props: PageProps<'/blog/[slug]'>) {
   *   const { slug } = await props.params
   *   return <div>Blog post: {slug}</div>
   * }
   * ```
   */
  interface PageProps<AppRoute extends AppRoutes> {
    params: Promise<ParamMap[AppRoute]>
    searchParams: Promise<Record<string, string | string[] | undefined>>
  }

  /**
   * Props for Next.js App Router layout components
   * @example
   * ```tsx
   * export default function Layout(props: LayoutProps<'/dashboard'>) {
   *   return <div>{props.children}</div>
   * }
   * ```
   */
  type LayoutProps<LayoutRoute extends LayoutRoutes> = {
    params: Promise<ParamMap[LayoutRoute]>
    children: React.ReactNode
  } & {
    [K in LayoutSlotMap[LayoutRoute]]: React.ReactNode
  }

  /**
   * Context for Next.js App Router route handlers
   * @example
   * ```tsx
   * export async function GET(request: NextRequest, context: RouteContext<'/api/users/[id]'>) {
   *   const { id } = await context.params
   *   return Response.json({ id })
   * }
   * ```
   */
  interface RouteContext<AppRouteHandlerRoute extends AppRouteHandlerRoutes> {
    params: Promise<ParamMap[AppRouteHandlerRoute]>
  }
}
