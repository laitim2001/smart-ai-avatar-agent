// Prisma Schema for Smart AI Avatar Agent
// NextAuth.js v5 + Prisma Adapter compatible schema

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js required models
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String // Hashed password for credentials auth
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts        Account[]
  sessions        Session[]
  settings        UserSettings?
  activityLogs    ActivityLog[]
  favoriteAvatars UserFavoriteAvatar[]
  conversations   Conversation[]
  promptTemplates PromptTemplate[]
  customAvatars   CustomAvatar[]
  aiAgents        AIAgent[] // Sprint 11: AI Agent system

  @@map("users")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_tokens")
}

model PasswordResetToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("password_reset_tokens")
}

// Sprint 2: User Settings and Preferences
model UserSettings {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Avatar preferences
  defaultAvatarId  String?
  defaultAvatarUrl String?

  // Notification settings
  emailNotifications Boolean @default(true)
  pushNotifications  Boolean @default(false)

  // Interface preferences
  theme    String @default("system")
  language String @default("zh-TW")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user_settings")
}

// Sprint 2: User Activity Tracking
model ActivityLog {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  action    String // "login", "logout", "profile_update", "avatar_change", "password_change"
  metadata  Json? // Additional information about the action
  ipAddress String?
  userAgent String?

  createdAt DateTime @default(now())

  @@index([userId, createdAt])
  @@map("activity_logs")
}

// Sprint 5: Avatar Gallery
model Avatar {
  id          String   @id @default(cuid())
  name        String
  description String?
  url         String // GLB model URL (Ready Player Me)
  thumbnail   String // Thumbnail image URL
  category    String // male, female, neutral
  tags        String[] // casual, professional, fantasy, etc.
  featured    Boolean  @default(false)
  popularity  Int      @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  favoritedBy UserFavoriteAvatar[]
  aiAgents    AIAgent[] // Sprint 11: AI Agent system

  @@index([category])
  @@index([featured])
  @@map("avatars")
}

// Sprint 5 Phase 2.2: User Favorite Avatar (Many-to-Many)
model UserFavoriteAvatar {
  id       String @id @default(cuid())
  userId   String
  avatarId String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  avatar   Avatar @relation(fields: [avatarId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([userId, avatarId])
  @@index([userId])
  @@index([avatarId])
  @@map("user_favorite_avatars")
}

// Sprint 6 Phase 1: Conversation History
model Conversation {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  title    String  @default("新對話") // Default conversation title
  avatarId String? // Avatar used in this conversation (optional, deprecated in favor of agent.avatarId)

  // Sprint 11: AI Agent association
  agentId String? // AI Agent used in this conversation
  agent   AIAgent? @relation(fields: [agentId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  messages Message[]

  @@index([userId, createdAt(sort: Desc)]) // Optimized for listing user's conversations
  @@index([agentId]) // Optimized for filtering by agent
  @@map("conversations")
}

// Sprint 6 Phase 1: Conversation Messages
model Message {
  id             String       @id @default(cuid())
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  role      String // "user" or "assistant"
  content   String   @db.Text // Message content (can be long)
  timestamp DateTime @default(now())

  @@index([conversationId, timestamp]) // Optimized for fetching messages in chronological order
  @@map("messages")
}

// Sprint 9 Phase 1: Prompt Template System
model PromptTemplate {
  id     String  @id @default(cuid())
  userId String? // null for system templates
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  title       String // Template title (e.g., "專業商務顧問", "創意寫作助手")
  description String? // Optional description
  content     String  @db.Text // Prompt template content (can be long)

  category String // learning, work, creative, entertainment, professional, daily
  tags     String[] // professional, creative, technical, casual, educational

  isSystem   Boolean @default(false) // true for system templates, false for user templates
  featured   Boolean @default(false) // featured templates
  popularity Int     @default(0) // usage count or popularity score

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([category])
  @@index([userId])
  @@index([isSystem, featured]) // Optimized for fetching system/featured templates
  @@map("prompt_templates")
}

// Custom Avatar System (Ready Player Me integration)
model CustomAvatar {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  name         String // User-defined name for the avatar
  description  String? // Optional description
  url          String // Ready Player Me GLB model URL
  thumbnailUrl String? // Optional thumbnail image URL
  sourcePhoto  String? // Optional: original photo URL (for reference)

  // Ready Player Me specific data
  rpmId   String? // Ready Player Me avatar ID
  rpmData Json? // Additional RPM metadata

  // Usage tracking
  isActive   Boolean @default(false) // Currently active avatar
  usageCount Int     @default(0) // How many times used

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, createdAt(sort: Desc)])
  @@index([userId, isActive])
  @@map("custom_avatars")
}

// ═══════════════════════════════════════════════════════════════════
// Sprint 11: Multi AI Agent System
// ═══════════════════════════════════════════════════════════════════

// Persona Definition (Agent personality and behavior)
model Persona {
  id String @id @default(cuid())

  // Basic definition
  name        String // Persona name (e.g., "Senior Business Consultant")
  role        String // Role positioning
  description String @db.Text // Detailed description

  // System Prompt configuration
  systemPrompt String @db.Text // Complete System Prompt

  // Language characteristics
  language String   @default("zh-TW")
  tone     String // professional/friendly/casual/academic
  style    String[] // ["concise", "professional", "friendly"]

  // Capability definition
  capabilities String[] // ["business analysis", "data interpretation", "strategic planning"]
  restrictions String[] // ["no politics", "no legal advice"]

  // Version control
  version  String  @default("1.0.0")
  isActive Boolean @default(true)

  // Relations
  agents AIAgent[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([language, isActive])
  @@map("personas")
}

// AI Agent (User-created or system-provided AI assistants)
model AIAgent {
  id     String  @id @default(cuid())
  userId String? // null for system default agents
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Basic information
  name        String // Agent name (e.g., "CDO Business Advisor")
  description String? // Agent description
  category    String // learning/work/creative/professional/daily

  // Persona configuration
  personaId String // Link to Persona definition
  persona   Persona @relation(fields: [personaId], references: [id])

  // Avatar appearance
  avatarId String? // 3D Avatar model ID
  avatar   Avatar? @relation(fields: [avatarId], references: [id])

  // Language settings
  primaryLanguage    String   @default("zh-TW") // Agent primary language
  supportedLanguages String[] // Supported languages list

  // Knowledge base associations
  knowledgeBases AgentKnowledgeBase[]

  // Conversation associations
  conversations Conversation[]

  // Status and permissions
  isActive Boolean @default(true)
  isPublic Boolean @default(false) // Public agent (can be copied by other users)
  isSystem Boolean @default(false) // System default agent

  // Usage statistics
  usageCount Int @default(0)
  popularity Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, createdAt(sort: Desc)])
  @@index([category, isPublic])
  @@index([isSystem, isActive])
  @@map("ai_agents")
}

// Knowledge Base (Agent-specific or shared knowledge documents)
model KnowledgeBase {
  id String @id @default(cuid())

  // Basic information
  name        String // Knowledge base name (e.g., "CDO FAQ")
  description String?
  type        String // faq/kpi/persona/pov/decision/meeting/document
  category    String // business/technical/learning/general

  // Language
  language String @default("zh-TW")

  // Content
  content  String @db.Text // Markdown content
  metadata Json? // Additional structured data

  // File path (if loaded from file system)
  filePath String? // e.g., "agent-brain/cdo-advisor/faq.md"

  // Relations
  agents AgentKnowledgeBase[]

  // Version and status
  version  String  @default("1.0.0")
  isActive Boolean @default(true)
  isPublic Boolean @default(false) // Can be referenced by other agents

  // Usage statistics
  usageCount Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([type, language])
  @@index([category, isActive])
  @@map("knowledge_bases")
}

// Many-to-many relation table (Agent <-> KnowledgeBase)
model AgentKnowledgeBase {
  id              String @id @default(cuid())
  agentId         String
  knowledgeBaseId String

  agent         AIAgent       @relation(fields: [agentId], references: [id], onDelete: Cascade)
  knowledgeBase KnowledgeBase @relation(fields: [knowledgeBaseId], references: [id], onDelete: Cascade)

  // Association configuration
  priority   Int     @default(0) // Search priority
  isRequired Boolean @default(false) // Must load

  createdAt DateTime @default(now())

  @@unique([agentId, knowledgeBaseId])
  @@index([agentId])
  @@index([knowledgeBaseId])
  @@map("agent_knowledge_bases")
}
