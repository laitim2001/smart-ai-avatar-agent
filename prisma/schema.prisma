// Prisma Schema for Smart AI Avatar Agent
// NextAuth.js v5 + Prisma Adapter compatible schema

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js required models
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String    // Hashed password for credentials auth
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  settings      UserSettings?
  activityLogs  ActivityLog[]

  @@map("users")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_tokens")
}

model PasswordResetToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("password_reset_tokens")
}

// Sprint 2: User Settings and Preferences
model UserSettings {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Avatar preferences
  defaultAvatarId    String?
  defaultAvatarUrl   String?

  // Notification settings
  emailNotifications Boolean @default(true)
  pushNotifications  Boolean @default(false)

  // Interface preferences
  theme              String  @default("system")
  language           String  @default("zh-TW")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user_settings")
}

// Sprint 2: User Activity Tracking
model ActivityLog {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  action    String   // "login", "logout", "profile_update", "avatar_change", "password_change"
  metadata  Json?    // Additional information about the action
  ipAddress String?
  userAgent String?

  createdAt DateTime @default(now())

  @@index([userId, createdAt])
  @@map("activity_logs")
}

// Sprint 5: Avatar Gallery
model Avatar {
  id          String   @id @default(cuid())
  name        String
  description String?
  url         String   // GLB model URL (Ready Player Me)
  thumbnail   String   // Thumbnail image URL
  category    String   // male, female, neutral
  tags        String[] // casual, professional, fantasy, etc.
  featured    Boolean  @default(false)
  popularity  Int      @default(0)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([category])
  @@index([featured])
  @@map("avatars")
}
